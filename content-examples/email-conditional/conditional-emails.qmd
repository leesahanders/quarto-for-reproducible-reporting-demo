---
title: "Quarto Emails (with Connect)"
author: "Lisa Anders"
format: email
---


## Send an email conditionally

Modify the yaml to change the output format (note that a specific quarto version or most recent is required): 

```
format: email
```

Add a section to define the email content. Files can be attached, calculation outputs can be included, and this can even be wrapped in a conditional statement to only send on certain conditions: 

Randomly select a condition to demonstrate different conditions: 

```{r}
variant <- sample(1:3, 1)
```

```{r}
#| output: asis
cat(
  "---",
  paste0("is_email_variant_",variant,": true"),
  "---",
  sep = "\n"
)
```

::: {.email}

This email was sent from Quarto! With conditional output for condition `r variant`

::: {.content-visible when-meta="is_email_variant_1"}

email body 1

```{r}
print('case 1')
```

Remember to pick up groceries on you way home. Tonight is "breakfast
for dinner" and we're having French Toast!

* Bread
* Eggs
* Butter
* Milk

::: {.subject}
subject 1
:::

:::

::: {.content-visible when-meta="is_email_variant_2"}

email body 2

```{r}
print('case 2')
```

Remember to pick up groceries on you way home. Tonight is "Tex-mex" and we're having tacos!

* Onions
* Bell peppers
* Fajita
* Tortillas
* Lime
* Avocado

::: {.subject}
subject 2
:::


:::

::: {.content-visible when-meta="is_email_variant_3"}

email body 3

```{r}
print('case3')
```

Remember to pick up groceries on you way home. Tonight we're having stir fry!

* Snap peas
* Noodles
* Tofu
* Soy Sauce
* Rice

::: {.subject}
subject 3
:::

:::

::: {.email-scheduled}
TRUE
:::

:::

## Logging

Case: `r variant`

Report run: `r Sys.time()`


::: {.email}

::: {.subject}
Buy groceries
:::

Remember to pick up groceries on you way home. Tonight is "breakfast
for dinner" and we're having French Toast!

* Bread
* Eggs
* Butter
* Milk

:::


## Email notification code: Alert when a new blog post has been released!

```{r}
library(tidyRSS)
library(dplyr)
library(lubridate)

# Test your rss generator using this URL for the contents of the R Journal
rss_url <- "http://journal.r-project.org/rss.atom"
```

```{r}
rss <- tidyfeed(rss_url)
```

Check if the date for a published blog post happened since the last time we checked for an update. This will depend on what scheduling options are chosen when published to Connect. This example assumes that this document is deployed to run **daily** at **8am**. 

```{r}
# rss_new <- rss %>% select(-feed_category, -item_category) %>% filter(feed_description == "A great sample blog")

rss_new <- rss %>% select(-feed_category, -item_category) %>% filter(item_pub_date >= (now() - days(1)))
```

Set up logic to check if conditions have been met to send the email, else stop rendering the document. 

```{r}
if (nrow(rss_new > 0)) {
  # continue
  print("New posts found")
} else {
  stop("No new blog posts, stopping")
}
```



Send an email. 

::: {.email}

::: {.subject}
New blog post!
:::

Check out the new blog post, **`{r} paste(rss_new$item_title, sep = ", ")`**, [here](`{r} paste(rss_new$item_link, sep = ", ")`)

:::


## Implementation notes

References: 

- <https://docs.posit.co/connect/user/quarto/index.html#email-customization> 
- <https://quarto.org/docs/authoring/conditional.html> 
- <https://github.com/rich-iannone/quarto-email/issues/9> 

### RSS feed details

Goal: Using the RSS feed from [the published sample blog](https://colorado.posit.co/rsc/connect/#/apps/1561d39e-977a-4e5c-9e73-857860b3d076/access) this quarto document will send an email when a new blog has been published. 

The [quarto RSS feed option](https://quarto.org/docs/websites/website-blog.html#rss-feed) will need to be enabled on the site that will be tracked. We can then use [tidyrss](https://robertmyles.github.io/tidyRSS/) to read the rss file back. 

This is using an example that was [deployed to Posit Connect](https://quarto.org/docs/publishing/rstudio-connect.html#publish-command) for the email generation with the [Connect Email Generation feature](https://quarto.org/docs/prerelease/1.4/email.html). 

Limitations: 

- This implementation currently doesn't have handling for authentication and only works with quarto blogs that have been published **anyone, no login required**. 
- What happens if the scheduling service is interrupted for some reason? Right now the lookback is still just for the last 1 day. Other options could be to `pin` the xml and use that to compare to what was available the last time it ran, or use `connectapi` to check when last it successfully ran and use that to generate a timeframe. 
- Email customization requires Quarto 1.4.