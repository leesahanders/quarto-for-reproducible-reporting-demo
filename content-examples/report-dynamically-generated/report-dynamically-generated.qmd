---
title: "Dynamically Generated Report"
author: "Lisa Anders" 
date: last-modified
format: 
  html:
    anchor-sections: true
    toc: true
    toc-location: right
    toc-title: "Contents"
    link-external-icon: true
    link-external-newwindow: true
    code-links:
      - text: Source Code
        icon: github
        href: https://github.com/leesahanders/quarto-for-reproducible-reporting-demo/tree/main/content-examples/report-dynamically-generated
    theme: 
      light: morph
      dark: cyborg
execute:
  echo: true
editor: source
---

The markdown formatting that defines tabs, sections, etc can all be programmatically generated. Here are a bunch of examples. 

# Resources 

- Programmatically generating quarto sections: <https://github.com/quarto-dev/quarto-cli/discussions/796>
- The results: asis option is discussed in the docs here with some great examples: <https://quarto.org/docs/computations/execution-options.html#raw-output>
- <https://josh.quarto.pub/posts/2022-11-10-quarto-tabsets-update/2022-11-10-quarto-tabsets-update.html>

# Raw output from code chunk 

From: <https://quarto.org/docs/computations/execution-options.html#raw-output> 

Generate the sections (or any markdown text) with the clever addition of `::: {.panel-tabset}` Quarto formatting indicators and `#| output: asis` to tell Quarto to treat the output as markdown. 

For example, with your preferred language you could include code like this: 

::: {.panel-tabset}

## R

````markdown
```{{r}}
#| echo: false
#| output: asis
#| echo: fenced
#| code-overflow: wrap

cat("## Heading 1\n")
cat("### Heading 2\n")
```
````

## Python

````markdown
```{{python}}
#| echo: false
#| output: asis
#| echo: fenced
#| code-overflow: wrap
print("# Heading 1\n")
print("## Heading 2\n")
```
```

:::

This will give you these sections added into your Quarto document: 

```{r}
#| echo: false
#| output: asis

cat("### Heading 1\n")
cat("#### Sub-heading A\n")
```

# Code cell option `panel: tabset`

We can also the option `panel: tabset` to indicate to Quarto that each output from a code chunk should be put in it's own tab. In this example each tab will just be labelled "Table". 

From: <https://github.com/quarto-dev/quarto-cli/discussions/796> 

```{r}
#| panel: tabset
#| output: asis
list_of_tables <- rep(list(head(mtcars)), 3)
names(list_of_tables) <- c("Table 1", "Table 2", "Table 3")
for (itable in names(list_of_tables)) {
  cat(sprintf("## %s\n", itable))
  print(knitr::kable(list_of_tables[[itable]]))
}
```

# Another example, this time with iwalk

```{r}
#| echo: false

library(tidyverse)

languages <- c("R", "Python")
sections <- c("Static Documents", "Interactive Applications", "API's", "Pins")
text <- c("hello")
```

### tabs

:::: {.column-body}
::: {.panel-tabset}
```{r}
#| results: asis
#| fig-width: 14
#| fig-height: 6

iwalk(languages, ~ {
  cat('#### ', .y, '\n\n')

  print(paste0(text, collapse = ""))

  cat('\n\n')

})

```

:::
::::


# Another example, this time with a for loop

```{r}
#| echo: false

library(tidyverse)

languages <- c("R", "Python")
sections <- c("Static Documents", "Interactive Applications", "API's", "Pins")
text <- c("hello")
```

### tabs

:::: {.column-body}
::: {.panel-tabset}
```{r}
#| results: asis
#| fig-width: 14
#| fig-height: 6

for(i in languages){
  cat('#### ', i, '\n\n')
  print(paste0(text, collapse = ""))
  cat('\n\n')
}
```

:::
::::

### Another tabset from chunks example from Quarto team

From: <https://github.com/quarto-dev/quarto-examples/blob/main/tabsets/tabsets-from-r-chunks/index.qmd>

```{r}
#| echo: false

library(dplyr)
library(gt)
library(purrr)
```

#### Tables

::: {.panel-tabset}

```{r}
#| output: asis
#| echo: false
res <- purrr::map_chr(unique(starwars$homeworld), \(hw) {
    knitr::knit_child(
      input = "child-dir/_child.qmd",
      envir = environment(),
      quiet = TRUE
      )
  })

cat(res, sep = '\n')
```
:::

### Example with plots from Stackoverflow 

From: <https://stackoverflow.com/questions/73367433/how-to-programmatically-generate-tabset-panel-in-quarto>

```{r}
#| echo: false

library(tidyverse)

data <- iris %>% as_tibble()

plots <- data %>%
  group_nest(Species) %>%
  deframe() %>%
  map(., ~ {
    ggplot(.x, aes(x = Sepal.Length, y = Sepal.Width)) +
      geom_point() +
      theme_bw(
        base_size = 18 # to increase the size of the plot elements
      )
  })

```

#### Iris Plots

:::: {.column-screen}
::: {.panel-tabset}
```{r}
#| results: asis
#| fig-width: 14
#| fig-height: 6

iwalk(plots, ~ {
  cat('## ', .y, '\n\n')
  print(.x)
  cat('\n\n')
})

```

:::
::::


 
