---
title: "UltraViolet"
date: "last-modified"
date-format: "YYYY-MM-DD HH:mm"
format:
  dashboard:
    logo: images/Leafey.PNG
    nav-buttons:
    - icon: github
      href: "https://github.com/leesahanders/quarto-for-reproducible-reporting-demo"
editor: source
expandable: true
theme: lux
resource_files:
- custom.scss
- images/Leafey.PNG
---

<!-- Other good themes: morph, pulse, sandstone, spacelab, solar, slate, lux  -->

# DATE `r Sys.Date()`

<!-- Pull data for UV  -->

```{r}
#| echo: false
#| warning: false
#| message: false
#| content: valuebox
#| title: "UV Index"

library(httr)
library(httr2)
library(png)
library(xml2)
library(rvest)
library(tibble)
library(knitr)
library(kableExtra)
library(dplyr)
library(tidyverse)
library(sf)
library(leaflet)
library(gt)
library(zipcodeR)

zipcodes_eastern <- search_tz('Eastern')
zipcodes_mountain <- search_tz('Mountain')
zipcodes_central <- search_tz('Central')
zipcodes_pacific <- search_tz('Pacific')

samplesize = 100

# Randomly sample zipcodes by timezone to make sure there is coverage, make sure 80304 is always included
zipcodes <- c(sample(x = zipcodes_eastern$zipcode, size = samplesize), 
              sample(x = zipcodes_mountain$zipcode, size = samplesize), 
              sample(x = zipcodes_central$zipcode, size = samplesize), 
              sample(x = zipcodes_pacific$zipcode, size = samplesize),"80304") %>%
  unique()

# For testing, downselect
#zipcodes <- c("80304","80302","80301","80310","80303","80305","80025","77024","77025","77030","77035","77096","77320","77342","77334")
#zipcodes <- c("80304","80302","80301","80310","80303","80305","80025")

output_format <- c("XML", "JSON", "EXCEL", "CSV")[1] ## As XML 
# Test from terminal with: curl "https://data.epa.gov/efservice/getEnvirofactsUVDAILY/ZIP/80304/XML"

# Try to load the cached data while developing to make things faster
#if(interactive()){
if(exists("tmp/data.RData")){
  load(file="tmp/data.RData") 
}
#}

if(!exists("uv_df")){
  
  print("uv_df doesn't exist")
  
# uv_df <- data.frame()
# uv_today <- data.frame()
# 
# # Todo: Parallelize 
# for(i in zipcodes){
#   print(i)
#   url <- paste0("https://data.epa.gov/efservice/getEnvirofactsUVDAILY/ZIP/",i,"/",output_format)
#   
#   uv <- request(url) |> 
#     req_perform() |> 
#     resp_body_xml()
#   
#   state <- xml_text(xml_find_all(uv, xpath = "//STATE"))
#   uv_index <- xml_text(xml_find_all(uv, xpath = "//UV_INDEX"))
#   uv_alert <- xml_text(xml_find_all(uv, xpath = "//UV_ALERT"))
#   date <- xml_text(xml_find_all(uv, xpath = "//DATE"))
#   
#   uv_df_tmp <- data.frame(state = state,  zipcode = i, uv_index = uv_index, uv_alert = uv_alert, date = date)
#   
#   uv_df <- rbind(uv_df, uv_df_tmp)
#   
#   uv_today_tmp <- tibble(state = state,  zipcode = i, uv_index = uv_index) %>%
#     mutate(
#       uv_index = cell_spec(uv_index, color = ifelse(uv_index < 3, "green","red"))) 
# 
#   uv_today <- rbind(uv_today, uv_today_tmp)
# }
# 
# uv_df_zip <- uv_df %>% 
#   # Add geocode 
#   mutate(lat = geocode_zip(zipcode)$lat) %>% 
#   mutate(lng = geocode_zip(zipcode)$lng) %>%
#   # Add color
#   mutate(uv_index = as.numeric(uv_index)) %>%
#   mutate(color = case_when(
#     uv_index <= 2 ~ "#6B990F",
#     3 < uv_index &  uv_index <= 5 ~ "#FFFF32",
#     5 < uv_index &  uv_index <= 7 ~ "#FF7F00",
#     7 < uv_index &  uv_index <= 10 ~ "#E51932",
#     uv_index >= 11 ~ "#6551CC",
#     .default = "#E5E5E5"
#   )) %>%
#   mutate(color_name = case_when(
#     uv_index <= 2 ~ "green",
#     3 < uv_index &  uv_index <= 5 ~ "yellow",
#     5 < uv_index &  uv_index <= 7 ~ "orange",
#     7 < uv_index &  uv_index <= 10 ~ "red",
#     uv_index >= 11 ~ "purple",
#     .default = "white"
#   ))
# 
#   # For testing, cache the data if it hasn't been already
#   if(interactive()){
#     save.image(file="tmp/data.RData") 
#   }
}

# Resources: 
# https://www.reddit.com/r/scacjdiscussion/comments/12qpj80/how_do_you_find_an_accurate_uv_index_forecast/
# https://pyowm.readthedocs.io/en/latest/v3/uv-api-usage-examples.html (deprecated 2021) 
# https://openweathermap.org/api/uvi (deprecated 2021)
# https://openweathermap.org/api/one-call-3 (requires pricing)
# https://www.epa.gov/enviro/web-services#uvindex
# https://github.com/r-lib/httr2/issues/344
# https://stackoverflow.com/questions/73555055/converting-a-xml-page-to-a-data-frame/73556402#73556402
# https://stackoverflow.com/questions/69940271/embed-xml-from-file-into-rmd
# https://www.robwiederstein.org/2021/03/05/xml-to-dataframe/
# https://www.epa.gov/enviro/envirofacts-data-service-api
# Search zipcodes: https://www.unitedstateszipcodes.org/
# Uv index reference: https://19january2017snapshot.epa.gov/sunsafety/uv-index-scale-1_.html
# Color pallettes: https://r-charts.com/color-palettes/ 
```

## Column {width=25%}

### Row {height=25%}

<!-- ## UV Index Today -->

```{r}
#| echo: false
#| warning: false
#| message: false
#| content: valuebox
#| title: "UV Index Today"

uv_today_box = filter(uv_df_zip, zipcode == "80304")

list(
  icon = "sun",
  color = "secondary",
  value = uv_today_box$uv_index
)
```

<!-- ## Today's weather -->

```{r}
#| echo: false
#| warning: false
#| message: false

library(httr)
library(httr2)
library(png)
library(xml2)
library(rvest)
library(tibble)
library(knitr)
library(kableExtra)
library(dplyr)

# Find the grid forecast endpoint with this url: https://api.weather.gov/points/{latitude},{longitude}
# https://api.weather.gov/points/40.04,-105.23

url <- paste0("https://api.weather.gov/gridpoints/BOU/57,76/forecast")

# "forecast": "https://api.weather.gov/gridpoints/BOU/57,76/forecast",
# "forecastHourly": "https://api.weather.gov/gridpoints/BOU/57,76/forecast/hourly",
# "forecastGridData": "https://api.weather.gov/gridpoints/BOU/57,76",
# "observationStations": "https://api.weather.gov/gridpoints/BOU/57,76/stations",

weather <- request(url) |> 
  req_perform() |> 
  resp_body_json()

weather_periods <- weather$properties$periods

# period_1_name <- weather_periods[[1]]$name
# period_1_temperature <- weather_periods[[1]]$temperature
# period_1_temperatureUnit <- weather_periods[[1]]$temperatureUnit
# period_1_windspeed <- weather_periods[[1]]$windSpeed
# period_1_shortForecast <- weather_periods[[1]]$shortForecast
period_1_detailedForecast <- weather_periods[[1]]$detailedForecast

# print(period_1_detailedForecast)

# list(
#   icon = "umbrella",
#   color = "primary",
#   value = period_1_detailedForecast
# )

# https://www.weather.gov/documentation/services-web-api
# Test from terminal with: curl "https://data.epa.gov/efservice/getEnvirofactsUVDAILY/ZIP/80304/XML"
# https://quarto.org/docs/dashboards/data-display.html#text-content
```

::: {.card}
Weather: `r period_1_detailedForecast`
:::

### Row {height=75%}

<!-- ## Weather forecast -->

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: tbl-weather2
#| tbl-cap: "Weather forecast"

library(httr)
library(httr2)
library(png)
library(xml2)
library(rvest)
library(tibble)
library(knitr)
library(kableExtra)
library(dplyr)
library(data.table)

# Find the grid forecast endpoint with this url: https://api.weather.gov/points/{latitude},{longitude}
# https://api.weather.gov/points/40.04,-105.23

url <- paste0("https://api.weather.gov/gridpoints/BOU/57,76/forecast")

# "forecast": "https://api.weather.gov/gridpoints/BOU/57,76/forecast",
# "forecastHourly": "https://api.weather.gov/gridpoints/BOU/57,76/forecast/hourly",
# "forecastGridData": "https://api.weather.gov/gridpoints/BOU/57,76",
# "observationStations": "https://api.weather.gov/gridpoints/BOU/57,76/stations",

weather <- request(url) |> 
  req_perform() |> 
  resp_body_json()

weather_periods <- data.table::rbindlist(weather$properties$periods, fill = TRUE) %>% 
  select(-probabilityOfPrecipitation, -dewpoint, -relativeHumidity, -temperatureTrend) %>% 
  unique() %>%
  mutate(forecast = "", temperature = paste(temperature, temperatureUnit), windSpeed = paste(windSpeed, windDirection)) %>% 
  select(name, forecast, temperature, windSpeed, shortForecast, icon) %>% 
  slice_head(n=5)
weather_periods_url_image <- weather_periods %>% select(icon)
#   select(name, forecast, temperature, temperatureUnit, windSpeed, windDirection, shortForecast, icon) 
# weather_periods_url_image <- weather_periods %>% select(icon)

weather_periods %>% 
  select(-icon) %>% 
  kbl(booktabs = T, align = "c") %>% #, caption = "Weather forecast") %>%
  kable_styling() %>%
  kable_paper(full_width = T) %>%
  column_spec(2, image = spec_image(weather_periods_url_image$icon, 280, 200))


# https://www.weather.gov/documentation/services-web-api
# Test from terminal with: curl "https://data.epa.gov/efservice/getEnvirofactsUVDAILY/ZIP/80304/XML"
# https://www.robwiederstein.org/2021/04/04/convert-list-of-unequal-length-to-dataframe/
# https://r-graph-gallery.com/363-add-images-and-links-in-kableExtra.html
```


<img src="images/uv_index_scale_epa.png" class="w-75"/>

## Column {.tabset width=75%}

### Row {height=100%}

<!-- UV Map with leaflet -->

#### UV Map with leaflet

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: plot-map
#| tbl-cap: "UV Map"
#| padding: 0px

# Find the grid forecast endpoint with this url: https://api.weather.gov/points/{latitude},{longitude}
# https://api.weather.gov/points/40.04,-105.23

leaflet() %>%
  addTiles() %>%
  setView(lng = -105.23, lat = 40.04, zoom = 7) %>%
  # Add UV data
  addCircleMarkers(data = uv_df_zip, color = uv_df_zip$color,
                   popup = paste0("Selected point","<hr>","UV index: ",uv_df_zip$uv_index, "<br>", "Zipcode: ", uv_df_zip$zipcode)) %>%
  #addCircles(data = uv_df_zip, radius = 2000) %>% 
  # Add legend 
  addLegend(data = uv_df_zip,
            position = "bottomright",
            colors = unique(uv_df_zip %>% select(color, uv_index))$color,
            labels = unique(uv_df_zip %>% select(color, uv_index))$uv_index,
            title = "Legend",
            opacity = 1) %>%
  # Add measurement tool - for fun
  addMeasure(
    position = "bottomleft",
    primaryLengthUnit = "meters",
    primaryAreaUnit = "sqmeters",
    activeColor = "#3D535D",
    completedColor = "#7D4479") %>%
  # Add daylight layer
  addTerminator() %>%
  # Add minimap
  addMiniMap(width = 150, height = 150)

#uv_df
# References 
# https://r-charts.com/spatial/interactive-maps-leaflet/
```


<!-- UV Choropleth Map -->

#### UV Choropleth Map

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: plot-map-choropleth
#| tbl-cap: "UV Map"
#| padding: 0px


# TODO: 
# https://lucaliehner.com/blog/mapping-zip-codes-to-shapefiles-in-r-with-ggplot-g/ 
```


<!-- UV Map Raw Data -->

#### Data

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: tbl-map
#| tbl-cap: "UV Map Raw Data"

uv_df %>%
  kbl(booktabs = T, align = "lc") %>% #, caption = "RSS Feed for R-weekly") %>%
  kable_styling() %>%
  kable_paper(full_width = T)
```


