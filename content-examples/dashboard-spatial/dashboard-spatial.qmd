---
title: "UltraViolet"
date: "last-modified"
date-format: "YYYY-MM-DD HH:mm"
format:
  dashboard:
    logo: images/Leafey.PNG
    nav-buttons:
    - icon: github
      href: "https://github.com/leesahanders/quarto-for-reproducible-reporting-demo"
editor: source
expandable: true
theme: lux
resource_files:
- custom.scss
- images/Leafey.PNG
---

<!-- Other good themes: morph, pulse, sandstone, spacelab, solar, slate, lux  -->

# DATE `r Sys.Date()`

<!-- Pull data for UV  -->

```{r}
#| echo: false
#| warning: false
#| message: false
#| content: valuebox
#| title: "UV Index"

library(httr)
library(httr2)
library(png)
library(xml2)
library(rvest)
library(tibble)
library(knitr)
library(kableExtra)
library(dplyr)
library(tidyverse)
library(sf)
library(leaflet)
library(gt)

zipcodes <- c("80304","80302","80301","80310","80303","80305","80025")
output_format <- c("XML", "JSON", "EXCEL", "CSV")[1] ## As XML 
# Test from terminal with: curl "https://data.epa.gov/efservice/getEnvirofactsUVDAILY/ZIP/80304/XML"

uv_df <- data.frame()
uv_today <- data.frame()

for(i in zipcodes){
  #print(i)
  url <- paste0("https://data.epa.gov/efservice/getEnvirofactsUVDAILY/ZIP/",i,"/",output_format)
  
  uv <- request(url) |> 
    req_perform() |> 
    resp_body_xml()
  
  # resp_l <- resp |> 
  #   as_list() |> 
  #   unlist(recursive = FALSE)
  
  # uv_str <- xml_structure(uv)
  
  state <- xml_text(xml_find_all(uv, xpath = "//STATE"))
  uv_index <- xml_text(xml_find_all(uv, xpath = "//UV_INDEX"))
  uv_alert <- xml_text(xml_find_all(uv, xpath = "//UV_ALERT"))
  date <- xml_text(xml_find_all(uv, xpath = "//DATE"))
  
  uv_df_tmp <- data.frame(state = state,  zipcode = i, uv_index = uv_index, uv_alert = uv_alert, date = date)
  
  uv_df <- rbind(uv_df, uv_df_tmp)
  
  uv_today_tmp <- tibble(state = state,  zipcode = i, uv_index = uv_index) %>%
    mutate(
      uv_index = cell_spec(uv_index, color = ifelse(uv_index < 3, "green","red"))) 
  
  uv_today <- rbind(uv_today, uv_today_tmp)
}


# Resources: 
# https://www.reddit.com/r/scacjdiscussion/comments/12qpj80/how_do_you_find_an_accurate_uv_index_forecast/
# https://pyowm.readthedocs.io/en/latest/v3/uv-api-usage-examples.html (deprecated 2021) 
# https://openweathermap.org/api/uvi (deprecated 2021)
# https://openweathermap.org/api/one-call-3 (requires pricing)
# https://www.epa.gov/enviro/web-services#uvindex
# https://github.com/r-lib/httr2/issues/344
# https://stackoverflow.com/questions/73555055/converting-a-xml-page-to-a-data-frame/73556402#73556402
# https://stackoverflow.com/questions/69940271/embed-xml-from-file-into-rmd
# https://www.robwiederstein.org/2021/03/05/xml-to-dataframe/
# https://www.epa.gov/enviro/envirofacts-data-service-api
# Search zipcodes: https://www.unitedstateszipcodes.org/
```

## Row {height=25%}

<!-- ## UV Index Today -->

```{r}
#| echo: false
#| warning: false
#| message: false
#| content: valuebox
#| title: "UV Index Today"

uv_today_box = uv_df %>% filter(zipcode == "80304")

list(
  icon = "sun",
  color = "secondary",
  value = uv_today_box$uv_index
)
```

<!-- ## Today's weather -->

```{r}
#| echo: false
#| warning: false
#| message: false

library(httr)
library(httr2)
library(png)
library(xml2)
library(rvest)
library(tibble)
library(knitr)
library(kableExtra)
library(dplyr)

# Find the grid forecast endpoint with this url: https://api.weather.gov/points/{latitude},{longitude}
# https://api.weather.gov/points/40.04,-105.23

url <- paste0("https://api.weather.gov/gridpoints/BOU/57,76/forecast")

# "forecast": "https://api.weather.gov/gridpoints/BOU/57,76/forecast",
# "forecastHourly": "https://api.weather.gov/gridpoints/BOU/57,76/forecast/hourly",
# "forecastGridData": "https://api.weather.gov/gridpoints/BOU/57,76",
# "observationStations": "https://api.weather.gov/gridpoints/BOU/57,76/stations",

weather <- request(url) |> 
  req_perform() |> 
  resp_body_json()

weather_periods <- weather$properties$periods

# period_1_name <- weather_periods[[1]]$name
# period_1_temperature <- weather_periods[[1]]$temperature
# period_1_temperatureUnit <- weather_periods[[1]]$temperatureUnit
# period_1_windspeed <- weather_periods[[1]]$windSpeed
# period_1_shortForecast <- weather_periods[[1]]$shortForecast
period_1_detailedForecast <- weather_periods[[1]]$detailedForecast

# print(period_1_detailedForecast)

# list(
#   icon = "umbrella",
#   color = "primary",
#   value = period_1_detailedForecast
# )

# https://www.weather.gov/documentation/services-web-api
# Test from terminal with: curl "https://data.epa.gov/efservice/getEnvirofactsUVDAILY/ZIP/80304/XML"
# https://quarto.org/docs/dashboards/data-display.html#text-content
```

::: {.card}
Weather: `r period_1_detailedForecast`
:::

<!-- ## Weather forecast -->

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: tbl-weather2
#| tbl-cap: "Weather forecast"

library(httr)
library(httr2)
library(png)
library(xml2)
library(rvest)
library(tibble)
library(knitr)
library(kableExtra)
library(dplyr)
library(data.table)

# Find the grid forecast endpoint with this url: https://api.weather.gov/points/{latitude},{longitude}
# https://api.weather.gov/points/40.04,-105.23

url <- paste0("https://api.weather.gov/gridpoints/BOU/57,76/forecast")

# "forecast": "https://api.weather.gov/gridpoints/BOU/57,76/forecast",
# "forecastHourly": "https://api.weather.gov/gridpoints/BOU/57,76/forecast/hourly",
# "forecastGridData": "https://api.weather.gov/gridpoints/BOU/57,76",
# "observationStations": "https://api.weather.gov/gridpoints/BOU/57,76/stations",

weather <- request(url) |> 
  req_perform() |> 
  resp_body_json()

weather_periods <- data.table::rbindlist(weather$properties$periods, fill = TRUE) %>% 
  select(-probabilityOfPrecipitation, -dewpoint, -relativeHumidity, -temperatureTrend) %>% 
  unique() %>%
  mutate(forecast = "", temperature = paste(temperature, temperatureUnit), windSpeed = paste(windSpeed, windDirection)) %>% 
  select(name, forecast, temperature, windSpeed, shortForecast, icon) %>% 
  slice_head(n=5)
weather_periods_url_image <- weather_periods %>% select(icon)
#   select(name, forecast, temperature, temperatureUnit, windSpeed, windDirection, shortForecast, icon) 
# weather_periods_url_image <- weather_periods %>% select(icon)

weather_periods %>% 
  select(-icon) %>% 
  kbl(booktabs = T, align = "c") %>% #, caption = "Weather forecast") %>%
  kable_styling() %>%
  kable_paper(full_width = T) %>%
  column_spec(2, image = spec_image(weather_periods_url_image$icon, 280, 200))


# https://www.weather.gov/documentation/services-web-api
# Test from terminal with: curl "https://data.epa.gov/efservice/getEnvirofactsUVDAILY/ZIP/80304/XML"
# https://www.robwiederstein.org/2021/04/04/convert-list-of-unequal-length-to-dataframe/
# https://r-graph-gallery.com/363-add-images-and-links-in-kableExtra.html
```


## Row {.tabset height=75%}

<!-- UV Map  -->

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: plot-map
#| tbl-cap: "UV Map"
#| padding: 0px

circles <- data.frame(lng = c(-3.7, -8, -4.2),
                      lat = c(40.4, 43.1, 41.4),
                      values = c(10, 20, 30))

# Continuous palette
# pal <- colorNumeric(palette = "viridis", domain = circles$values)

# Discrete palette
pal <- colorFactor("viridis", levels = circles$values)

# Find the grid forecast endpoint with this url: https://api.weather.gov/points/{latitude},{longitude}
# https://api.weather.gov/points/40.04,-105.23

leaflet() %>%
  addTiles() %>%
  setView(lng = -105.23, lat = 40.04, zoom = 7) %>%
  addCircleMarkers(data = circles, color = ~pal(values)) %>%
  # Add legend 
  addLegend(data = circles,
            position = "bottomright",
            pal = pal, values = ~values,
            title = "Legend",
            opacity = 1) %>%
  # Add measurement tool - for fun
  addMeasure(
    position = "bottomleft",
    primaryLengthUnit = "meters",
    primaryAreaUnit = "sqmeters",
    activeColor = "#3D535D",
    completedColor = "#7D4479") %>%
  # Add daylight layer
  addTerminator() %>%
  # Add minimap
  addMiniMap(width = 150, height = 150)

#uv_df
# References 
# https://r-charts.com/spatial/interactive-maps-leaflet/
```

<!-- UV Map Raw Data -->

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: tbl-map
#| tbl-cap: "UV Map Raw Data"

uv_df %>%
  kbl(booktabs = T, align = "lc") %>% #, caption = "RSS Feed for R-weekly") %>%
  kable_styling() %>%
  kable_paper(full_width = T) #%>%
  #column_spec(1, link = rss_r_weekly_url$entry_link)

```


